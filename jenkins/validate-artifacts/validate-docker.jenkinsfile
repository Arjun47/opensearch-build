lib = library(identifier: 'jenkins@4.1.1', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

def docker_images = [
    "tar": "opensearchstaging/ci-runner:ci-runner-rockylinux8-opensearch-dashboards-integtest-v2",
    "rpm": "opensearchstaging/ci-runner:ci-runner-rockylinux8-systemd-base-integtest-v1",
    "yum": "opensearchstaging/ci-runner:ci-runner-rockylinux8-systemd-base-integtest-v1",
]

def docker_args = [
    "tar": "-u 1000",
    "rpm": "--entrypoint=/usr/sbin/init -u root --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro",
    "yum": "--entrypoint=/usr/sbin/init -u root --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro",
]

def agent_nodes_docker = [
    "x64": "Jenkins-Agent-AL2-X64-C54xlarge-Single-Host",
    "arm64": "Jenkins-Agent-AL2-Arm64-C6g4xlarge-Single-Host",
]

def agent_nodes = [
    "x64": "Jenkins-Agent-AL2-X64-C54xlarge-Docker-Host",
    "arm64": "Jenkins-Agent-AL2-Arm64-C6g4xlarge-Docker-Host",
]

pipeline {
    options {
        timeout(time: 4, unit: 'HOURS')
    }
    agent none
    parameters {
        string(
            name: 'VERSION',
            description: 'VERSION NUMBER',
            trim: true
        )
        string(
            name: 'DISTRIBUTION',
            description: 'Enter the distribution type among [tar,rpm,yum,docker,All(To run all the distributions)] default is set to Tarball',
            trim: true,
            defaultValue: "tar rpm yum docker"

        )
        string(
            name: 'ARCHITECTURE',
            description: 'Enter the architecture type among [x64,arm64] default is set to x64',
            trim: true,
            defaultValue: "x64 arm64"
        )
        string(
            name: 'OS_BUILD_NUMBER',
            description: 'Enter the build number for opensearch-This parameter is applicable only for docker validation',
            trim: true,
        )
        string(
            name: 'OSD_BUILD_NUMBER',
            description: 'Enter the build number for opensearch Dashboards -This parameter is applicable only for docker validation',
            trim: true,
        )
        string(
            name: 'OPTIONAL_ARGS',
            description: 'optional choose among validate-digest-only or using-staging-artifact-only',
            trim: true,
            defaultValue: "using-staging-artifact-only"
        )

    }

    stages {
        stage('verify-parameters') {
            agent { label agent_nodes["x64"] }
            steps {
                script {
                    if (VERSION == '') {
                        currentBuild.result = 'ABORTED'
                        error('Provide version number for the artifacts')
                    }
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }


        stage('Run for all validations') {
            agent {label agent_nodes["x64"] }
            steps {
                script {

                    def distributionList = DISTRIBUTION ? DISTRIBUTION.trim().split(" ") as List : ""
                    def architectureList = ARCHITECTURE ? ARCHITECTURE.trim().split(" ") as List : ""

                    echo "distributionList: ${distributionList}"
                    echo "architectureList: ${architectureList}"

                    stash includes: "**", name: "validateDocker-$BUILD_NUMBER"

                    validateArchitectures = [:]

                    for (architecture in architectureList) {
                        def local_architecture = architecture.trim()
                        list = ["tar", "rpm", "yum"]
                        counter = 0
                        val = list[counter]
                        counter = counter + 1
                        validateArchitectures["Validation ${local_architecture}"] = {
                            validateDistributions = [:]
                            for (distribution in distributionList) {
                                echo "architectureList: ${architectureList}"
                                echo "architecture: ${architecture}"
                                echo "local_architecture: ${local_architecture}"
                                def local_distribution = distribution.trim()
                                def local_distribution_index = distributionList.indexOf(local_distribution)
                                def wait_seconds = local_distribution_index * 10

                                echo "Add Distribution: ${local_distribution}"
                                // Using scripted pipelines to trigger dynamic parallel stages
                                validateDistributions["Validation ${local_distribution}"] = {
                                    timeout(time: 2, unit: 'HOURS') {
                                        if ("${local_distribution}" == "docker"){
                                            node(agent_nodes_docker["$local_architecture"]) {
                                                try {
                                                    stage("Validate") {
                                                        unstash "validateDocker-$BUILD_NUMBER"

                                                        validateArtifacts(
                                                            version: "$VERSION",
                                                            distribution: "${local_distribution}",
                                                            arch: "${local_architecture}",
                                                            "os-build-number": "$OS_BUILD_NUMBER",
                                                            "osd-build-number": "$OSD_BUILD_NUMBER",
                                                            "$OPTIONAL_ARGS" : ""
                                                        )
                                                    }
                                                } catch (e) {
                                                    echo "Error occurred while validating ${local_distribution}"
                                                    throw e
                                                } finally {
                                                    echo "Completed validation for ${local_distribution}"
                                                    postCleanup()
                                                }
                                            }
                                        } else {
                                            node(agent_nodes["$local_architecture"]) {
                                                docker.withRegistry('https://public.ecr.aws/') {
                                                    docker.image(docker_images["$local_distribution"]).inside(docker_args["$local_distribution"]) {
                                                        try {
                                                            stage("Validate") {
                                                                unstash "validateDocker-$BUILD_NUMBER"

                                                                validateArtifacts(
                                                                    version: "$VERSION",
                                                                    distribution: "${local_distribution}",
                                                                    arch: "${local_architecture}"
                                                                )
                                                            }
                                                        } catch (e) {
                                                            echo "Error occurred while validating ${local_distribution}"
                                                            throw e
                                                        } finally {
                                                            echo "Completed validation for ${local_distribution}"
                                                            postCleanup()
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            parallel validateDistributions
                        }
                    }
                    parallel validateArchitectures
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
    }
}
