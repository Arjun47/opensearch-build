lib = library(identifier: 'jenkins@lib', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/Divyaasm/opensearch-build-libraries.git',
]))

def docker_images = [
    "tar": "opensearchstaging/ci-runner:ci-runner-rockylinux8-opensearch-dashboards-integtest-v2",
    "rpm": "opensearchstaging/ci-runner:ci-runner-rockylinux8-systemd-base-integtest-v1",
    "yum": "opensearchstaging/ci-runner:ci-runner-rockylinux8-systemd-base-integtest-v1",
]

def docker_args = [
    "tar": "-u 1000",
    "rpm": "--entrypoint=/usr/sbin/init -u root --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro",
    "yum": "--entrypoint=/usr/sbin/init -u root --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro",
]

def agent_nodes = [
    "x64": "Jenkins-Agent-AL2-X64-C54xlarge-Docker-Host",
    "arm64": "Jenkins-Agent-AL2-Arm64-C6g4xlarge-Docker-Host",
]

pipeline {
    options {
        timeout(time: 4, unit: 'HOURS')
    }
    agent none
    parameters {
        string(
            name: 'VERSION',
            description: 'VERSION NUMBER',
            trim: true
        )
        string(
            name: 'DISTRIBUTION',
            description: 'Enter the distribution type among [tar,rpm,yum,docker,All(To run all the distributions)] default is set to Tarball',
            trim: true,
            defaultValue: "tar"
        )
        string(
            name: 'ARCHITECTURE',
            description: 'Enter the architecture type among [x64,arm64] default is set to x64',
            trim: true,
            defaultValue: "x64"
        )
    }

    stages {
        stage('Validate a Distribution') {
            when {
                expression { DISTRIBUTION != "All" }
            }
            agent {
                docker {
                    label agent_nodes["$ARCHITECTURE"]
                    image docker_images["tar"]
                    args docker_args["$DISTRIBUTION"]
                    alwaysPull true
               }
            }
            steps {
                script {
                    if (VERSION == '') {
                        currentBuild.result = 'ABORTED'
                        error('Provide version number for the artifacts')
                    }
                    validateArtifacts(
                            version: "$VERSION",
                            distribution: "tar",
                            arch: "$ARCHITECTURE"
                    )
                }
            }
            post() {
                always {
                    script {
                        postCleanup()
                    }
                }
            }
        }

        stage('Run for all validations') {
            when {
                expression { DISTRIBUTION == "All" }
            }
            agent { label agent_nodes["$ARCHITECTURE"] }
            steps {
                script {
                    stash includes: "**", name: "validateDocker-$BUILD_NUMBER"

                    def distributionList = ["tar","rpm","yum"]
                    echo "distributionList: ${distributionList}"

                    validateDistributions = [:]

                    for (distribution in distributionList) {
                        echo "Distribution: ${distribution}"
                        def local_component = distribution.trim()
                        echo "Distribution: ${local_component}"
                        def local_component_index = distributionList.indexOf(local_component)
                        def wait_seconds = local_component_index * 10

                        echo "Add Distribution: ${local_component}"
                        validateDistributions["Run Validation ${local_component}"] = {
                            // Using scripted pipelines to trigger dynamic parallel stages
                            timeout(time: 2, unit: 'HOURS') {
                                node(agent_nodes["$ARCHITECTURE"]) {
                                    docker.withRegistry('https://public.ecr.aws/') {
                                        docker.image(docker_images["$local_component"]).inside(docker_args["$local_component"]) {
                                            try {
                                                stage("Run Validation for ${local_component}") {
                                                    unstash "validateDocker-$BUILD_NUMBER"

                                                    validateArtifacts(
                                                            version: "$VERSION",
                                                            distribution: "${local_component}",
                                                            arch: "$ARCHITECTURE"
                                                    )
                                                }
                                            } catch (e) {
                                                echo "Error occurred while validating ${local_component}"
                                                throw new Exception("Error running integtest for component ${local_component}", e)
                                            } finally {
                                                echo "Completed validation for ${local_component}"
                                                postCleanup()
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    parallel validateDistributions
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
    }
}
