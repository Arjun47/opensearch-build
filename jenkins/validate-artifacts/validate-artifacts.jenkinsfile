lib = library(identifier: 'jenkins@lib', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/Divyaasm/opensearch-build-libraries.git',
]))

def AGENT = env.ARCHITECTURE == 'x64' ? "Jenkins-Agent-AL2-X64-C54xlarge-Docker-Host" : "Jenkins-Agent-AL2-Arm64-C6g4xlarge-Docker-Host"
def IMAGE = env.DISTRIBUTION == 'tar' ? "opensearchstaging/ci-runner:ci-runner-rockylinux8-opensearch-dashboards-integtest-v2" : "opensearchstaging/ci-runner:ci-runner-rockylinux8-systemd-base-integtest-v1"
def ARGUMENTS = env.DISTRIBUTION == 'tar' ? "-u 1000" : "--entrypoint=/usr/sbin/init -u root --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro"

pipeline {
    agent none
    parameters {
        string(
            name: 'VERSION',
            description: 'VERSION NUMBER',
            trim: true
        )
        string(
            name: 'DISTRIBUTION',
            description: 'Enter the distribution type among [tar,rpm,yum,docker,All(To run all the distributions)] default is set to Tarball',
            trim: true,
            defaultValue: "tar"
        )
        string(
            name: 'ARCHITECTURE',
            description: 'Enter the architecture type among [x64,arm64] default is set to x64',
            trim: true,
            defaultValue: "x64"
        )
    }

    stages {
        stage('Validate a Distribution') {
            when {
                expression { DISTRIBUTION != "All" }
            }
            agent {
                docker {
                    label AGENT
                    image IMAGE
                    args ARGUMENTS
                    alwaysPull true
               }
            }
            steps {
                script {
                    if (VERSION == '') {
                        currentBuild.result = 'ABORTED'
                        error('Provide version number for the artifacts')
                    }
                    validateArtifacts(
                            version: "$VERSION",
                            distribution: "$DISTRIBUTION",
                            arch: "$ARCHITECTURE"
                    )
                }
            }
            post() {
                always {
                    script {
                        postCleanup()
                    }
                }
            }
        }

        stage('Run for all validations') {
            when {
                expression { DISTRIBUTION == "All" }
            }
            agent { label AGENT }
            steps {
                script {

                    stash includes: "**", name: "validation-$BUILD_NUMBER"

                    def distributionList = ["tar","rpm","yum"]
                    echo "distributionList: ${distributionList}"

                    validateDistributions = [:]

                    for (distribution in distributionList) {
                        def local_distribution = distribution
                        def wait_seconds = distributionList.indexOf(local_distribution) * 20

                        echo "Add Distribution: ${local_distribution}"

                        validateDistributions["Validation for ${local_distribution}"] = {
                            // Using scripted pipelines to trigger dynamic parallel stages
                            timeout(time: 2, unit: 'HOURS') {
                                node(AGENT) {
                                    docker.image(IMAGE).inside(ARGUMENTS) {
                                        try {
                                            stage("Run Validation for ${local_distribution}") {
                                                echo "Distribution Name: ${local_distribution}"
                                                unstash "validation-$BUILD_NUMBER"

                                                validateArtifacts(
                                                version: "$VERSION",
                                                distribution: "${local_distribution}",
                                                arch: "$ARCHITECTURE"
                                                )
                                            }
                                        } catch (e) {
                                            echo "Error occurred while validating ${local_distribution}"
                                            throw e
                                        } finally {
                                            echo "Completed validation for ${local_distribution}"
                                            postCleanup()
                                        }
                                    }
                                }
                            }
                        }
                    }
                    parallel validateDistributions
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
    }
}
